import collections
import numpy as np
from typing import List

#acbadbaada
#aaaaa

#Sliding window counter
#Runtime: 292 ms, faster than 45.43% of Python3 online submissions for Number of Good Ways to Split a String.
#Memory Usage: 14.3 MB, less than 99.82% of Python3 online submissions for Number of Good Ways to Split a String.
class Solution:
    def numSplits(self, s: str) -> int:
        res = 0
        l = collections.defaultdict(int)
        r = collections.Counter(s)
        for i in range(len(s)):
            l[s[i]] += 1
            r[s[i]] -= 1
            if not r[s[i]]: del r[s[i]]
            if len(l) == len(r):
                res += 1
            # print(l,r)
        return res

print(Solution().numSplits("acbadbaada"))
print(Solution().numSplits("aaaaa"))




#Left occurrences
#acbadbaada
#1233333333
#Right occurrences
#1222222333 [::-1]
#3332222221

#Correlation:
#3's Intersect.

#aaaaa
#11111
#11111
#if l[i] == r[i]:
#Same char counts on both sides.
#abab
#1222
#1222 -> #2221
#Res: 2
#
# class Solution:
#     def numSplits(self, s: str) -> int:



#TLE
#"cikohdddhfjhhljfkelfaeiaijalndjhdhoooeocalliemjgaafknjiakgaobffhaofglhkiefhigacjoehcdbhglgckadkmnnomfmealkffchkbknnbhbiokbiaejdlgebnocbdmahalnjdaemhkafnnahgbbggjlbdkjoghigcdkcaifadnciffikmebkneeciddlofflmiligdaacclonblnbebncojldbnihceoegfnhjifohbioheabolibldedagjcfkleicdghahajfmlohdnkajeanijfofgmekgmjachknddoiaeibokimggenghjmhnmlbakbackhabkbdmihkbmodinggbnjonlkaogdoeijcoaebhaaehgndlngnolbokkfcoanlnochnfklakmhlilkkclnhhfdleedddbjiknabcofiidaijeelgdkblheciogfhhennjneckedmcdfddjckjfnnmjhhomahcmglnjiiegodgmnkngjomiajnjnbajanggoabolbkfdoelbiegeaojiehblienjlemajjbleildikkmddjgafkdgbnfongemelgmfjeeiaodgimbbaackffdnakkeiihnoogneciodfkggamehnacenfkeefcddadknaekhhfjjjkhbnmjciojacijelokjaoldgfbbakligodaccnkdgmnnoicgdcgigdglbimnbkcamoicgocacannedihihjmfjnahobejngolljmklcchnfcndoncbbibmiggnkcanekdmmlnnmcmkeecndafilgbnngojofnelcebkaeejojfegholkfhlhaookdcjinnmaaaebihbbakghdcieljiehnjgifbogkgbjlcecmlemkmljimfdoolcgigclhfdlfeaemdcmodjlhgbcailaccecgcdlkimdjhdibmakodkckggggndbimhlojckchdegbkegcongjcfblbgaedaaijflkkiolmaohgbnjkcgeiegnahcldojejkfkjihodjillfknhdmemfkficaenekechkaiaianlhfbahcokliffkoelbchidaakhmejcldbkobghlcojifabbmkbnebenemjjhilgbdjobllbcgikhhifdoggaiokimcjlckjmhhlihkkndjemaljllgcbnmgbhknofbbonlijenhkfdhilcljjcljconkkijldnnfloebhhefdbbmnbaiaaooenbinccaeonjfjaecndejkeajokidcamdabaiakcklldcjlgfnhdcnboegamemjhnheliodbekibgmbodekjjidkleofncejgkmoiehhcijngfdmenohhghfobniehcmjcanggnaiimidhnohokhelligffkdchjijiniefbikhjfjlabibdlngonbjglkfollgchfmnmleiimmobhmdaolidlmaeaoafbdnbiaabejolmcgbhjkffjjfdjejgahmiiambcmklhcngegmcjfcdahkaokdfgfehgahfckkmimbonckmbjolmknamcnjddimebhjobgibfbfkmialfcddlakdkejfodhcghddiolakmckljckkhlflkocikdhidcfcjciffhmakfdocjkfjbfafgagaicloodflikkdemniomdcjfbojmjfhnfeiadoflcfcklkdebhbgkgikcfcjfneahfgjaoaidlakknldffiejkgbjcclgkhmnaobheciegnealhlcfcceohomckdghmdmggbgnaecaibigodjjjjobfeecegkgelmbolimaaljkjlkgmceemalakbeeogchijeggefjddcjagodaljalimdodbikjjacjijflmhfcmhoijmbfenhgdbdklmdiinbnjcmhnagjiblbceiaiadhcchehgldhejnokofcohicobcolchmohodejnfhionlbinbedgkgkfcmokmkiddelckfkchdmbfbbnbnadkebljodheeofadbegjoeldenhdjjkflamancfbbcnmgagmnimjcnhadoidnhedknmhcokflfcodehmadhjkbnmabhanagodkganlbjcmgmdmmhbkgcifdlbkohacafofdjkjamdigldbjclkkibimbnaaaggmfgmhcdncljfjfaeagjeiodbfclhehaehcconblgmglocdjekicjkacdmjoejmmojojlbggjolffdajagficblcemobaoemblddccidkcmljfggjbohamegoeenbmffedfkidkfflkjnmlgbcchoickohnhnhdbjkkmgcbmjbbegdfjgiiamjfggfooakhneeejjfjjbnjhdogelcecgenimgbhncbmnklaicicdjbcbdngahfnhagekoojefhlbnlkihnedlfananfiollellgmgbkefnikljjeeogkaimlcakefcnifakceojemblcmegnjmhlblelnibjccfbdnbjihbknaohchkbabdieaffcliicmncdldoafhiionlhnbbkijmnalcahfhdjhmanlbbkebejdlgajjedcddibkknldmdanflnbhlakgagednhjcmgjccinjeolijlgmijdnmhajdhhmgcclaijldaiocfgdeomaagejkfkklkedlaenlghananmgdkcoocddgokjjgbflanjdlhhoklfkllfoflfedknecolgffahefclkmcfcajbcncjmllimgjneaiglcolcaamhjedggglngmidokikjjehhfgeoaiijhkbgmmnnagkjafobdmbfklfjcehlfejbcnecdikjehjelcahfmefdofbhlgnnfgchhaclmaehokllleeeameehhhifnlodndjagmmjadgkfamlnbnlfeddnkgehgcmhehiegcaediichmningbnlalnmlejlaoooabmoimimgljnhfnjedabkdikokoinicjcngcmhkblmffgobcmdndbafjbfdbjfdafhljanncedhdojbbhonnhkkicofidbfdbmhnaaaaicaalnndlkjfbmbmnmickmkbncodhoenhfikifiaolfanjccglblgkidadbiiflcldmanmbabgkdjoimomcjlknamcleoaigfeconhmjligjoaljicjgmgekacndljmaajiklddflbbgoaellbnfcibonhecbfhnjnaimfcahdlhkhldeijikobeonfcdoacdbhcllahigdfillooghdhhllbkecbohfnkmhjjmdodifklmdlaimgaoaeoaobfebkbjdfhnhoijfmoleoimjiigcakedjhfclnkjindleghmhldjjiafhhhleinecjkgadoggjlocbnmaelljekaaomghmfgljoohmbbjbndnimdhiknacdcbmegafhjgohomkogcgblhogbjcblojfnmmlngekhmajnamhacgjcinikbgholakhlmolemgjchbbloeldkmokkggcmnmfhnfhmbkemgmedcjihoihomnnnagmjiedlamofgekgehdlfnedimacnbmoaiobjeljfliehkoekbhcigifmnifefdfmllandgdhjnkbchkaenghhcienmeefmnfkjbefmdfohfeeihddlmmambamibjihidfeldngohiahjfkccnagcgofhnodcbnjghijlfngiedikonbllgljebbmmgifnlfgiihhgnhighkaidjdembdfcoglbcibcehoeaiecgmdocgahkahekaigbihimbbhhifjmhohideahjmdbonodfjbdjldfjfmhdnabkndgfdgdkfbgdjngkhbogdbongbknegcbbbemnlehchodbjalojoclklbhfnjjnggmnhecaigednlhijldomaanfcnhnnahjakimoofmjmighblfiijngjeaenhfdehghflmofhjmnfakbnefgalhgemaocdbcbccneonejekgbkdknblkcahggobjinbldlcfidnijihgookddndfdaemieklldjllchneijfkklaojgkkambalagkahaojhfclkdflhdhjjachkbhkhmcgjgjhaogmlfonffhifaooiolgocllhakbgbaafbafihfanljfdafoikioflfgkcmagnanenmdmkagoaddfgmiafgmmefaekbonkidjogdcmmnimffhjngihhiklmhgaanhdjjacoboaadeibcijlbiidjmgncgofebfbichiijddjabejceookbkhcklieofbhmfimimmfkbceinfdfohnmmkmbjlfhkbobmmegbgbfkooohhamcomnbijhackgdcgaljbgjabkbmhodbgnfhcbeckmnijbicdakakcffkmcgfchobfdokjjjdfbgbkeeoobmccnokllgkejghbhfdoogleiaodnfgelcagifjnljoinlandklofeekcmllihmgbibkkdknblhnhdmiojkdmdkonboiojekbkhmbiageomjiedbimlnagdimolalgkddhdgojmaciacfhajmcoojdbcljmbeigabclhkfkfbnglkgldfakbfmjfdbmkdglimgfnedjlhlfdfdfiiofhfmeehelljejjnchamlcehbcfakjnalefedhjdliooojaanfhgejcdgllffbkmffbencjnodfblaheghifabegfincbaknmlofkafjoclcgiaacflahdcbggicofjdffkdoahdmomcjecdocfhllhmlhflnnbbcbedkbcicnmkjnhdojkfjijfhifnmajnlifccfhjejjddboijaancnofmchackokobigaabdokggibdkoogdijidjgldffekjmkohkedjbghbejmmahkfjjfechcjnoaedbfodacgahjlahfeddkffoeemhnmlnbdcfgglndknlfclmkfciiinnleglanoiicgchocfimkmjdffigejiacagjofjecdnoledddbmjhjblmjlhfocibjcgoemiigmmjikflkengcndmackbidlgfakbobendgkjoendmhdgngcieiigclgdeolnnleloejjabjdaodleiemmlnkieijflljicafodenooammgaoabccodljmflfdedclggchdaicdilknbfnglihnfalkdhkcegbngkifkofnckokhafjckhcdljocjnjmemkeamljmggeibabojdlegghmhkleakknnmmihmbfhmibkdeekdahakbjgmhmehdlmcgmcjkidbhgocnjcliclmeocokcogfcgkibhjlianjdjflklacoojffajkjbjkgcingdilhefhibcmgijecgikbemoecehimecfbnafjnnmjbghdelojldeojldbeeockhcnciagoojgcehckjieckjlbbndlndnlemkcanbfkmnhfliekmfoibelamnhlgcmfeohicbcoblecmmghhnklbgmgneooimjbijhblghojlmaofahhmhbfmjbalongbhmflafcaddhdehibfgaefaoabjnbjmdilgjbjekgkimegjjhghbdhfmebkodmkdibdllnnnilimeglkljfgbbdlmaicmgbcomnmdninkllhhgfkjonohadkkjbeammamonibcannnfhnacgmehhgkkkmdahbdgbhbnnmjobjedhoeebjhafllmknaijecgkmgjfagjlnkcchfghenkflcmiinlbhokgckcffoegiceblhoggkahiilceiljdancgjodkmnblcngjddcgfgjamfcinenkemffodmnhgmhhhncjbklaglcoihfjoljcnfggohkekhgolcomngdenfiklanmeahibmledhkojooakkjimjoedjcofcdmkjbhglmckmffhedecajjegjmbighkjhcmflamkhjaiejcidndehkcekminlaeoinekoaagbaedbhmgcbaldelfabhlhakogddbfmbcacgccdfkkmjngncejgejjiniflgnnajilgkccfcgfkednedlmdlneichfoakbilfgefofmebgabdjedikjnicokfifmiilcmfokilkofebbjcegnfomdjhncmglmgnfccgakoebfecodogkdbeedbhfhfllebikgnohkonbekmblflbeadfahkbhekooelljoifholamcjmjnlcmminhkgfmihmhjboodkhcolldjlmncooblfikngnfmgiigjckaebenmjibbkabakhockcaakgacmnnfjdgalgnanckkfelilfkcdddbfgbjeejkmagkfoeehoodcjjgkhilboeffjkhaoecclmgoljlefajmjfidimikekffoemagfkedfhjdfmflkfdlbalgjahdkklefikmmdbkneifgalokfilomfabjkfifocehiohnlejjmcbofhjmfjojmkdockmngnoafnhiebmjkalmjbejhlechbfcljgeibmojnbfgnioimjidfdbfbfbfmoheiaefoiieieailelkcjbofdbjghalcolgchnaemakkeemmnbbachfjkncdfilgmigojeldeildjdgeggigkmoijeomonnikbeoceefekifdikdaocclkmeklnggcfongglblijckllmlhbggjhnkaiejbkcmmjlmkcidbfjdnhkabfijfeamljghldflbgjkdihgdbkjiohedicmlgaehaiobbifgdhkadlcklejjdgiahobhhgakaaeencdgohhenngliehdicidfiebmbhgmhdganekjamhcdnneficbbhndjkgibcheedoemaegimjcaddghljeaoccmjdlidjdmohhlfcfgjcdbflecbfheoimcajmdkeigkhnoogiaobldbmkiogahnmenhceijnolmjfaegihjgkamjfjjafldhmdnfgddbikmhelkadknhgbehnfmbcakgocmhjccenlakcccbhflnjiogeoohbhhjcglgoifdgmeheobmemgonadgiddienkljeekkhegkjhjifidgegleeaonaaofnblnlhlknfjnoljdabkijamfbfnbbmhbiegmkcmfeaicolfcbghhgcnjkealnfglagbohfbhhdinggjfefhcebhdhlkmmdbconileecjkogfloamiimgacjoaogfmkkiimliemladlmnddlfchdbljbonigbmdeaekcmcokkfdaehnnjhadmokiidhodhliglmaeoeiigeehjiahkdifdjmhfbijcglkokkajiaidklfankoeoigcloillhjbbkjgoejoelcmdjklmfgeojcnbmhejnknndgibjbnajaonbodekmjjkngmnelhobdklblbadglmkdoeacecefjaainbomnkfjmacdfahodgjdiobflihfekcmhdlimlgkmoolfcafbikeoammekajokbegfkneinhahbclamdcdcfhkiijbfjddhgaffcjnoajbocfnflggejgcijdaimjhmokgnmmckboiacdgoodebkojbjdcejkhelielnligicijgakihoglkilckijlccnjhnomhicohfgmcfkiafjghallokcafajikmbigckmflbdbjiidhjnfdhcmfekilkofjjmkoanfagfbnmfailfmcfnicjfnnjdjemgbemlaalfdjdjjcahjcadbihlijanlaffjjlgckllffalioihihdbjdcakffcgeegmcokbeoafcamlkfciaehaibdnjliofclgjcgoimcfobhncndjghcaaanagjimnjealgaokcoffdnkidhnadbkfcoohmcglbkbancdlohchjahjefcenaiemjoachljcfemcdhfchbihnhlncdoakhjenadembjkbemghjhjljgbmfbboaldboaggfnkobfhlkicclbjahdnjgbligjdmohbdjffdccdjihchaooinkmlifndmjgnocegdkccdjfigmobdfhnkmjehajhmahadeegicljajaakagembgeloibemofnnenbgjamldclngiojlahcomdikmkalbmhbaoacdbhdmfggebbjgnjmooolliaikndfodahddanibdhodncmabjinidhdamikedlbifnfdgddhjgaioheoadnfiicggknjgchnekfghihjeoladkebegomonoegnlbaanedkfcamcfhgdmdmnomhcobkeofiodaenonefoaknljhkbmlgmejbjcillbiemjndoieojmjeobiiblhldhclokbbomccnobkjdmjcbchngjeahiajlimeekmlaneiedikfihcoalgmdobmeglfefekkkgggkoneglaocgejlknmgmhbefihboihfjhdoihdjdllgofhbocgkljicdihhkdongeldbbfbinnjfcmkjofmgcocklfjeneajdccdgkhmmbglgmldjgigcokajhdhhfahkjhhndgmggemaaaiafcfjflemlnlaiimdklanghfehmigammhnnghamjanbbioflhgmndlldmjegbindkloahoagmckihemldaebohidfjbfdciamommijflhfminkdknclejojmckaefedbindkmfbejiigcgbfeoedmoohajhbhmoaldbcncjjeffajkjnnfgkinkclkanhlejlggdobeikjmhimbbfjafjjfiofammgcnjgcdaanoegifcnbhbbjdhdjninfaalokfiiobnkjdhhledhbcnikmaclnfdakdgianmgfnikhhmamlecbmfdilcaicddekoobhfcdmhodngfiaahelmbdjigdngkbkbgkinmlkchccegimjdfcifdiihffeldkckmkcfhkgocblmajfcikonodfmkjeonfobkoojmadifbedjkjakgebflgbjeenoojdbfbkjcinhniibodfoldldeldeajkieklkmlnjgcokmbgmilcefkkjibdddbnefodkaldeibdkhifloicamomhocacbobmendbeffcbjiahefiajcceahfookhiflmcbmckfemkbgoiokdadiidkikhoakomloaemgblhinikgmcoebiimlbgjgehjnnadbhocehejoilknckegdhobndleonignfjekdbglgdhldcladjhmkdmgddiionnjdacoemgjbkekokbbaeokidfakofmheinkocnklfdbfbdkjngcilekabbkhdonmfnfndljddhiiiiehbddnnlmaoggnfofgejgdomemeknmmdgimfeeighibclglkoahokeknkaadeacinadgmdihamgekkfdilhjogkhdkejjnmlgdhjndeomfbadfkgdogghknekdcgiiohclimienkdlmcogjejdihlnomgniefcnhkekofcojiofcadnbnchhmlcmadlbkjekdcihjbhdjidnaannnmenkbigclhcbjhaccicfimkjickfifolgdiaiggcmajledijebioijdlbbefaobjdgnolomhcfkdhekdibcmgjlmbldkfejkbjfjdhfiimdadaaalbcfhaokdihnecnajhfombfegoabbimbdlnaadmadjndofffockkemnjfdnceggckniofcfgoodhglokfnmingoilfkccaaadjocjlmmdbghiafohggbbnhohebkkacmmgmkncmliaagcfclkgfckfllbdcmjheoianlciboiolbghbjmhneeifajgjfeocdhiicdgkaiadddamfahalgckkejjcgekecaafnbhnggabcconljhbfbfnbgmljengbohkolfiifeihgodngdbonjakikgfjefgaeaffhnjimdejjmocaiijdamgdalogmblohjffnamjjkhbohcdkghhbcjkgbdljcfljdeaibmkohfnkkdkdddljhgfejlbjdiafnodlmoamiofnmkcekjeojlefoghlnmjnggffbebbjmibmkejgbiaiamookadljhjaoohmjjjienahmikdcfjedcfeofjelackeomkbegmabhdcojjjndgblilnnbanmdfklfeobnbbhdmocfglmbffeecnenackeccniddbjmcgebjjhajabfdgonbhldgbnbejjeojeiljdidanehogbdkinlajcamjnfjfdgkfjiehiaainkckhmcjklamohdobfbanfkbnmkjceahedbdfhkfmjhbgnnoddoamanbgohmfnohaghjmgdjonikladglhkljekejbgkldhkbgjjhhjmjenacbcelihncmnhgoclkafkhmkbahadjgbagcimhhdkbjfjjjokdliobghhniofjbackmlchaokjkhjgllknajkjdgidfcomginehhcfecafgmkhmabbkndidmgkmcbdkfedeiifdlfjgnibibhkcdljhkihbjbkbedlaohchmaogjjfdgfjdbokfaakfigenalodafabkefoifmoabafoldmcgbhendfnogiikgkjjfmigmagmkdcneijgcegbffakbjgniljljkiddglccnmfdfmejeanjjaefgidlngnbcmakmjhhdmbdchbahgijfbekbblfdehfbijocbmjlgfkbbonjbgojnmninhkdcibegekjklilfladkogjhlmfbkdbojedckdcfmajmhhejefkcclmjgdkaocejekgjglebbndblcmiakmbdfmcicehjijeddjjlnckbbbgafllhhdifaafjhajolcbiflfcgcgodfjnciomkafbhlnhegmheenachhlikebfhhffkakhdljjndmamdjmkhbgmjdoejidfefomiemebjgoldnjejmlidodbocicabjeikmallbbdemhijaiienacfomnfabeelhmlihhnkkjlgcklfbjjcifjhdaakjifkfekhkncfibgkhegkeejjeljinbcimhbjdbkmjinmlmnakfeoehjnhijgihmcngmloiljnbdhlcjcbbmcjkceffhkegmfgbamlefkgkhdalnbibbhllidjffelagnagijglnlllgambbhecjojeljmcfmfndekknefbaeagocjcnglmjnfalajcefkaoacfhnolebkfghkhodmfnencdlankkoeliichlfnbefbiggmhilfikbcfmalddocjkfhekfhgaidnogkmiaeaiodeddmgenmcncogoakoojndnccflmmggegimfnoafieafakmbgalaggldjlgfniljidnagljglkejnkfafklmlnmaeedkdbmohbinejondahgdjemhbfcbgagcdgjfaaabmfejfdjhnfegngloanlbomehcffmkoegjoljlbhdhofldlbhiahcbigjjjmkcjkceddioomenkmgflcmkgeokohhlmglniiolefeenglggfhbcddkednmakjgbgecbjmenbdeiokhgkfbedcjmjbmndieanndnlhdcffnhnkdlbimgdllmihiagfncnodhjocbagmfchccfijeaadffaiigblijfmfgdfgnfglahblaloeejgabgbkmnabfdchnkacmonakafdgjdbfoalfhfkcjiiijcceenlbahfgffgcdgiaamhgkbhgdiefdogbogfoboebcjgfamailjcegekgnbbdncjfagibdeoidcaognkoabhkogknfnkohhblolgndadaohlkfakdbnejnkojhdhmjgaoahkleijjaofmkainhociekgcnmdjghombadhhfhkfmjhedebanjioblfmnafaogoecinhakobmoingdadcchondneakbigjncaelgciinacdidhmbnflmogecbbdoagaelggmijneokfcgnigcgjdnoidhjfdaodmmcfjnmcnhjkbnlhnlakndnllibblcglbigjjnboagagdakdoneomongaaoefifegdibmonfjalhlechgbfdfnigkkddjbfejemajgnnbgggaaknhinjbbolimemgolgfhbnfnfaeoeiaaibiibdhfhcnllgfleablmacejichbklhklidodgegfflmdjgdeomlnkalofhdagnocflafmodekcfhnojnfomblbdbehdkifngbjioniggibfefdflcggblhcjjmggbhgkcklibbiemeokhlcoblehkdjlnjcfjmeohbafbdnlnbmaocnoanljnjjdnceemifodflknnmdlcelfihkhfbbeafcloiiljlbhclcmkiockiccdkincmelgldhkibaenbfbikgcmhhjmfkgbdffkabbnjccnhfelidnnjofembfogoidgefcaeahjnglcoaegfniekbnobjfmmofnoajnbmkmggbhljjbcjkkdkkbkmekgflghlichdokdcgjhgjljkadckibkbhfekinnjdgjgilkannaifehaidikiifomjojeconnnooehbdoinbohjkjfelfnndideabhohnicccgdmbfoamjcnfojmkbjjnchamkfcnmjahjmjichmfoeodamhkmaoigemalcaoijhedmljhhgjdfacjlhickaklaefbbeabaadgbmabaaebkiihncamaijihbljndmadjekgdndbaigalnlnliadhakmfkbhojnoglbmjohhjhfcmmlghbnooamnnaojcblcfcobfkgjebmkahindfbiieekakeajollmnlkaancdakmccoaecfolbndcnckhajdmamhbddjojkgeojinalniakbfnennejlmjnednaoffhfcdhjkcegonfkhmjelcdgkehboffiheahlalnkcakmdamolhkjkghihchdbnjcccameifanhlnofhlodldhlinjfiglgljeaeacmgedlkjfcdhkegaiidaggifnnndhefjleljddijgiflikeanfngfeccjlaoihfancbofgendcnnckniockmhhdimkbiiolldaafandijcnofdemihadbbgboafcjmcfklckkenedhcloiemniflbhhoklfhikmfcbemdmkokcmmfihgebhbblbedjjjiadfjabciodikecefhnikfhaiohchbclonhkifhnccmafddkmjlalacoajldfndmgfmifggmlnaiddonjojbikfhkbekdbdbhcfiehffabkaeemnaboklnaelloifeeniojdhbinemjgaoeggocblclcbhjeicmjkhnnjemeffeodfkbklkhogefiaicndialmmmbndijfclncnemanjaaaiidifaklidmchkhhlgfimhlkmlmkmekellhljccjicmbnnfkdjkmllakkfdnaagiljebfhoajgahkdnmgiollljfgihickfoajhhhoaladdnnlblajihekfgelefdabaoonjaajlcghcabncmfdblfifjmoodcbmanmkidnlfjimcialomfikbikjhbkcamigggjncdkiffghenfiljigliioanooilimbjefgejajjgbokhaodjebbcmnokjonjenlaoihbhdlgbcgdelfbdbcjknemanohbjjkgagidbicobammkfhliibodhgbmmeaebgmifibgdahbmhcjndadenjkobaibeceoefihdncoghbdmdlihfefhbleoekgnhidbnfhclijkacambonifbjfoihkjddljfdihcmcglbfbjmfelmmdikhmgonilkehbkcbbehicjhfcloohciojielfknffadlmclakgfcfglkfbcmkeombfdlhndfhgjaciknkhbdccinodiojoogginnheeomcbadaidbfiolkgomklmbagjkoflbggjkdjknnehmdkkjlebheaienmgchoilcjejoogfdnfgnlganmjoflhneeamefnoccmejdmcllccenkhabjdfanmblhdmmgjmcnkdabbbgnkmjhgcaaejjbidnecbjfhaeciaobghmnbmciblmohlibjkniimjdjkoodfieimglogjkignfolmilefeikmndneddeoofjbcogfhhomnfejjbilgnnhgngflkannkgfocffhojfkaghhjdklfggaemgbhegaangcdfgdjhanjhdolfinmfnindlmmmbbfljicbmgiloiickoenjkkfchgckjohemgelloafnellccaobfmnnfeojldcmbbfodhgliefgfbjenfagklkabfkofkecakmcigjgfobjajhjkalonleoikdambhbogkhlhojdlmaemahmmoiifafkofimnalacdhdchkdncknlocfeclefkhjmgjohciefkonnmfbhgoflgndkaklgfjdagmogaoijmalnoolbfnokckcflekalekhdlocgnbjoefccigibkbjobgommjhelhlcmeeojhilhmkfgenhhemgcoalnjghgefbgindacacaodalnhnoneidmbehecalnmklhglgmabahllddehgcmmcmchoelangcfbiihcijjbbhkobnhngmkeiljhkdianmdeiajdbflchghhhjjogikfomikalmlcfkoncmfacjfhnfkencdikoefbgenngioiochjkfdcjggkanlgenooifmbjmlmodneilecmgebolmjmjjfildcehnkhmhncnidgccejgcikebcenncfbfcobffjjccmeboojgjeghdedemoeldlkfhjjickbfjnfiajcjhojhbliclhhbboneffhjdioniccfomdlkkboncabjgmblncdgljekiikhmodladmfdeffannjalcneodeljfimocceecommcocbjoacnbikhbchniiclijomdjlojfbfkdnjnjaggjeokoilifkfjlfhidmaodlkbojbjfkojldflgamlefodojeigadienmihkcmkimdmfnbjaldikemfcgdlfdlhihklhjgjgegbekhfoghlcoammliiadbfcijnllcnehfihagfmecmjfflcaecoobjlmjkneghaobgcollfjedfkddmbobnkihkeokelaebgbhbfoffinlhfglkjbdjjelknjlnenfhdgdgiianbcohkajhlejlkadkdmhieffncjboemmeaebiijjmegafleioebamllieijnfahfieogaaejibikcjodlelanjegdmgoiiabkbhailjfjjbjcbdkedfblbdbaehjmjikjiekjcnlhigdelcfeccfbdjgefehjcikdghknjogdgjmjjkfejmkoilbigkoicigceoahhdabfnbmiegjmbfifgimablfinhoimfabollnjgkfkmofnmikogamggkfdbjdimikgeehioeibeajnggkbmbkmdallladobijgdnkmhglgogdiknoeegfhjfkfhclgjnndgdjekgjjgimggolcbikembmonagieeccjblmmhlojbhgniimllncelbjmahlijiaaejkgocekglghibcaideabechegabkgihbklloidiknalglcnkcdacmdccclhdlbbjncbcjlemmmcmkmhimmbbhflffiefhcnmfammlejjllakelnfknfboebhbdcaneeaiahimmibhmodbkclkjhkebcfhaojgfhdjedjhenaeangfhhhibkjidhcodgjcjoifacgcgdlanilejojgeihacbmjnogegnngolaogkmalghlkajakhmokihminnnahoffmenbfaolblieojidonicjfldfmbododoaccikammgjcmgboeoebbmlcgnjhbhmmnjdhagmbjoomkiafhgdjgjklelghameijfjgbghcfmiahchemdnnjdgajehgiegadjbejggoadbeeahcihhdlekmlofbjnomnbkbannfkeijfjeknajoabfffjckgdgblficfjgkjnebkikkiafjhammlgcjoifmijcbjliolehbonmngadogeohffakmefkdincikkadjcoonijmbgigiomcaiijhhanighkmdljjnknmfmhhhenhgkohlddlbfebaeoiaenoebcjjaechglkbhmgolieelcbgigmmnmhnaaaojekndfdddoobcohnafocdbldblbaggnhjghaioidegcnojfgncfnlecoddilgcaonagfgnahhgjmkmamjccllegfkbeifdgbfomcnmiedklifccdojbckieglggenmjlocmbgmlgldnikbbhamgbeogafmiomnomhabddiijodnmbaiaahlkdibeegjingedebnjglhiidmboaekckdbbankekdnkdbhellkdlgbjohbjnbjnjgimgjeajmbfjoddmeojiibgngjdnadbmlnaifcajjbedcnmkhjjdkmmmiahncalffjokachlejaacbgjonfhcfjnjondachmnfealieemmndjnammcgfjcadkgcmknofdfnbamdaifacfohlgiiddaoialidfadkjadgimlbdmhneajommfgkmhokdehgmkaflegbmedhkbjfbijegaagbfdeahndblhiggajefacahlghncjeanjkokbdhcgnikebmhicgfodnhhoheojckjhhdggnfnkgiocgconmjghggodbgmbbfnaadckdblellnkokfgdlokjodbfcglemkonhgbeehafdmncoohhdbcclemooghkonhhieecmbbgdifbklbchbfefcaandaelchhiginmbodgonlhagboemfcdbdmkmekeeijnddiakimaeommnjnbalahcneogeibkohoheejbaekfcifekfnbcnddnnndfflaihdecklhonkiigmkhlcigbikdaimikiejbggkfiiobinfbdbeillchfgofhhfjecanddmkmldbnlmcjfkhbmkebhffabieghkfmeaannjcnaclohkmmhecbicdcbilfnfcjjjnfgamagkfomaenjenmmhmobcadbmicennfmmegjhdjaikhiihcnkbjdimfnokadijnklhjogjbfcaheogijeddcbbfajoodknfekhffjgiimgnlidmmfhdcbcibmdlldkecbkmlfcbkgfnemahjjhfkhjjcafdbmdjfdkffcekhbbbgcomajjoclalgfjobemmndifehaoifkoojkglkabnlkhjijhbkiocfafibhjncgelahmfefhfbleeokbdgjfkfnhmokmeifkfkegbafohdohllaloocfbjldgohbnkilfdmcceofehebbjfnfdobdchhleahjlbchcnidkndeibnobajjnfnfhhgdedacclhaldekboalgohncjefoelbbeblknmkefmobofibbdkcfmbajbhekhgahmmkdiofhlfkaolmebgcfgfcfmnehbblcbnklgdjdhgegioodagigeffciikageoclffkkjobfjimkihhhmmmdlgomkjjibjnbabghofiabanfedkaaambijeedaoknnnncnmbndbajjcffeefcjlehmakakcmjkdhneeikcaoafmgaackccijeligfgbmgmjhiendleedkbmenajcbhfhckogloioookgjhcijmajnbkefmgihfdacmogahgkmhlbhnoaidinffbfdjbgoekaajobliboifhjhfbenhmoinenbfebcgfcicjefheiagfgangdgdlkalclcdgmfhijcafafdikeheabafijbofdaglighejlolbijnjkjdneoehobjhbbagfflnjnialekaialdebkdeiehanhegbjhjmmjkghkalgfikciaehmbldjoaaflkibbdfciaikhfhmjcaknccjgggjnbghhijbnemoagfhokljbnnkoimjelbcagkomofkbjbcmgocfogagklgodnoecmaocdhbcdgdfgindohoclcfidecimlmfdngijlajdjflhgnjmkkhjjkjmhccekofnemliahfjhjofehebijkcgakmkhadcficleeeoclibgembdleebaeckdbaechcccfmlhaoiojfjmcjgdfngimdhgfekaacahekhdahflglehmaljngadcecoafndccnolbmgobfojdojokoenhacdjhanjamjokinkbmaekjkalfcbfkignicekljfagfbdinnheejannglomdmhngomkbjkioilhmamaljnkgnimcahickbhejbfjjadonifdbfdfjchegnnjdedihcoldfifdjcfnfjkbadofljmjhocooaldjioddnjalihdnfhggmadlfdeigfgeeflgdnndefcaccbhmflmoeligdoognikmifacmkdkdclbaekookikdhgedfangojcacchihdimejbgjbffkejmmcfgdcikalciaifmlgfijgnibceljmhokbnobcjncdhaneekojkamdgoadlbdoafmefkbhlnhicidm"
#ss
#s|s => s[:1] s[1:]
class Solution2:
    def numSplits(self, s: str) -> int:
        res = 0
        for i in range(1, len(s)):
            l = s[:i]
            r = s[i:]
            if len(set(l)) == len(set(r)):
                res += 1
        return res
s = Solution()
print(s.numSplits("aacaba"))